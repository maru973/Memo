2/7 Udemy(Git)
  git : ファイルのバージョンを管理するもの。Linux開発で利用していたバージョン管理システムのライセンスが変更されて使用できなくなったため、開発された。
        他の管理システムはブランチを切ってマージするのにすごく時間と手間がかかる。（差分で保存）
        スピードが早く、シンプルな設計、ブランチが並列で開発可能
        変更内容をスナップショットとして保存する。
        コミットでバージョンを記録するとコミットを辿れば以前の状態に戻せる

  リーナストーバルズ　: OSであるLinuxを開発した人

  クリスワンストラス : Githubを作った人。サイドプロジェクトとしてスタート。Gitを他の人とシェアしたくて作られたサービス。

  Github : Gitリポジトリのホスティングサービス。オンラインで変更履歴やファイルを扱ってくれるサービス。
        プルリクエストで複数人開発が可能。
        世界中のチームがGithubで開発（チームのソフトウェアが見える）→見ず知らずの人と開発できる。

  ローカルの3つのエリア : 1.ワークツリー　・・・　ファイルを変更する作業場（VScode etc.）
                     2.ステージ　・・・　コミットする変更を準備する場所（git add)、記録したい変更分だけをステージに切り分ける
                     3.リポジトリ　・・・　スナップショットを記録する場所(git commit)

  Gitのデータ構造　: 1.圧縮ファイル　・・・　ステージに追加するときに作られる。ハッシュIDをファイルごとに生成して認識する。（=>ファイル名の情報がない！）
                　　2.ツリーファイル　・・・　コミットするときに作られる。圧縮ファイルでかけている情報（=ファイル名)を補う。
                　　3.コミットファイル・・・　コミットするときに作られる。親コミットを持つことで過去履歴を遡ることができる。誰が、いつ、何を変更したかなどの情報が生成される。
                　　Gitはデータを圧縮してスナップショットで保存する。

2/8 Udemy(Git)
  git init : .gitディレクトリ（ローカルリポジトリ）が作成される。 .gitの中にあるobjectに圧縮ファイルやツリーファイル、コミットファイルが保存される。configにはインデックスファイルが追加される。
  
  git diff : git addする前の変更分を確認できる。　git diff --stagedはgit commitする前の変更分が見れる。
  
  git config --global alias.ci commit : git commitをgit ciと打てるようになる。他のコマンドにも使える。
                                        ex. git config --global alias.st status
                                        --globalをつけるとPC全体に設定が反映される。

  git checkout -- . : ファイルへの全変更を取り消す。(git addする前の場合)
                      ワークツリーで変更を加えてから、変更を削除するためにこのコマンドを実行すると前回ステージにあげた情報を元にワークツリーの変更を戻す。

  git reset HEAD . : ステージにあげた変更を全消しする。ワークツリーのファイルの変更は削除されない。ワークツリーのファイル変更も削除したい場合はこのコマンドの後にgit checkoutをする。

  git commit --amend : 直前のコミットをやり直す。（push前)

  git fetch origin : リモートリポジトリの情報をローカルリポジトリに持ってくる。（remotes/origin/masterというところに保存される）　ワークツリーにはgit merge origin/masterで反映できる。

  git pull origin maseter : fetchしてmergeするを一度に行う。 ※今いるブランチにマージしてしまうため、他のブランチの情報をマージしてしまう可能性がある。

  git remote show origin : リモートリポジトリの詳細情報が確認できる。

2/9 Udemy(Git)
  HEAD : 今自分が作業しているブランチを示す。

  git hub flow : git hub社のワークフロー。

  マージ　 : 他の人の変更内容を統合すること。
          1. Fast Foward ・・・　早送りマージ。ブランチが枝分かれしてなかった時、ポインタを先に進める。
          2.　Auto Merge　・・・　基本的なマージ。枝分かれして開発してた時、マージコミットという新しいコミットファイルを作って変更履歴を統合する。　マージコミットは2つの親コミットファイルを持っている。
          3.　Comflict　・・・　同じファイルの同じ行を編集した時に起きる。

2/10 Udemy(Git)
  リベース : 変更を統合する際に履歴をきれいに整えるために使う。Githubにプッシュしたコミットをリベースしてはいけない。
          　　作業の履歴を残したいならマージ、きれいにしたいならリベースを使う。
            履歴を分割したり変更したりできる。

  タグ : コミットを参照しやすくするためにわかりやすい名前をつける。リリースポイントでよくつける。
        1.注釈付きタグ ・・・　タグ名の他に作成者やコメントなどもつけられる。
        2.軽量版タグ　・・・　タグ名のみつけられる。
