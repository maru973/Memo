2/12 Udemy(React)
  再レンダリングが起きる条件 : 1.stateが更新されたコンポーネント
                         2.propsが変更されたコンポーネント
                         3.再レンダリングされたコンポーネント配下の子要素

  memo : 子要素の一番最初につけることで、親要素の再レンダリングにともなって子要素も再レンダリングされてしまうのを防ぐ。（再レンダリングの最適化）

  useCallback : 実際は変更していないのに、アロー関数によって変更が加えられたと判断されて再レンダリングされるのを防ぐ。

2/13 Udemy(React)
  Inlinestyle : JSファイルにそのままスタイルを書いていく方法。

  CSSモジュール : コンポーネントに対応するように作成したCSSファイル。他のコンポーネントで同じ名前を使ってもimport名が違えば別物として扱われる。
                "node-sass"をインストールする。

  Styled JSX : コンポーネントの<style jsx="true">の中にCSSスタイルを記述することでスタイルが適用できる。
                "styled-jsx"をインストールする。

  Styled Components : コンポーネントの要素の後ろに関数を定義してその関数を要素内に記述することでスタイルが適用できる。
                      "styled-components"をインストールする。

  Emotion : Styled JSXやStyled Componentsなどいろいろな方法が使える。
            "@emotion/react"と"@emotion/styled"をインストールする。
            適用したいコンポーネントに/** @jsx jsx */と記述する。（エラーが出る場合は/** @jsxRuntime classic */を追記。）

2/14 Udemy(React)
  React router : Reactでルートを設定する。　ホームページにはexactをつけて完全一致したもののみtrueにしないと他のページのURL("/page1"のような)場合も"/"が一致しているため遷移しなくなる。

  useParams : 個々のURLを取得できる。 ex."/page1/:id"

  クエリパラメータ : URLに?を使って条件を設定する。

  history : 画面遷移の時に使う。

  <Route path="*"> : "*"は全て一致を意味する。他のルートをこのコード以外で設定していてそこで使っているパス以外はここで設定したルートに遷移する。

2/15 Udemy(React)
  Atomic Design : コンポーネントの分割の方法として主流となっているデザインシステム。
                  コンポーネント化されたいくつかの要素が画面を構成しているという考え方。
                  React用というわけではないが、モダンJSと相性がいい。
                  画面の要素を５段階に分け、組み合わせることでUIを実現。
                    1.Atom　・・・　もっとも小さくそれ以上分解できない要素。（ex.ボタン、アイコン、テキストボックス）
                    2.Molecules　・・・　Atomの組み合わせで意味を持つデザインパーツ。（ex.アイコンとメニュー名のセット、プロフィール画像とテキストボックスのセット）
                    3.Organisms　・・・　Atom、Moleculesの組み合わせで構成されるある程度意味を持つ要素群。（ex.サイドメニュー、１つのツイートエリア）
                    4.Templetes ・・・　ページのレイアウトのみを表現する要素。実際のデータは持たない。
                    5.Pages　・・・　最終的に表示される１画面。

  グローバルなstate : 画面のどのページからでも参照できたり変更できたりできるもの。Railsでいうインスタンス変数みたいなもの？

  Recoil : グローバルなstate管理ができるライブラリ
